/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.querycsvusingsql;

import java.awt.Image;
import java.io.File;
import java.io.InputStream;
import java.nio.file.Files;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.io.FileUtils;
import org.dcm4che3.tool.dcm2jpg.Dcm2Jpg;
import org.dcm4che3.tool.dcm2jpg.ImageView;

/**
 *
 * @author almadb
 */
public class PatientDetails extends javax.swing.JFrame {

    /**
     * Creates new form PatientDetails
     */
    public PatientDetails() {
        initComponents();
        datalake = null;
        imageIcon = null;
    }
    
    public PatientDetails(Datalake datalake) {
        this();
        this.datalake = datalake;
    }
    
    private Datalake datalake;
    private ImageIcon imageIcon;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        textFieldPatientID = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableListImages = new javax.swing.JTable();
        labelInfo = new javax.swing.JLabel();
        labelPreview = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        fieldStudyId = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        fieldSeriesInstanceUID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        fieldStudyDate = new javax.swing.JTextField();
        labelThumbnail = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("PatientID");

        textFieldPatientID.setEnabled(false);

        tableListImages.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tableListImages.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableListImagesMouseClicked(evt);
            }
        });
        tableListImages.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableListImagesKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(tableListImages);

        labelInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jButton1.setText("Preview image in new window");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Study ID");

        fieldStudyId.setMargin(null);

        jLabel4.setText("Study Date");

        fieldSeriesInstanceUID.setMargin(null);

        jLabel2.setText("Series Instance UID");

        fieldStudyDate.setMargin(null);

        labelThumbnail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelThumbnail.setIconTextGap(0);
        labelThumbnail.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                labelThumbnailKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addComponent(labelPreview))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(textFieldPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fieldStudyId, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(fieldStudyDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 255, Short.MAX_VALUE)
                                .addComponent(fieldSeriesInstanceUID, javax.swing.GroupLayout.Alignment.TRAILING))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 357, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelThumbnail, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(labelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(62, 62, 62))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(textFieldPatientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addComponent(labelInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(labelPreview)
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(fieldStudyDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(fieldSeriesInstanceUID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(fieldStudyId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3)))
                        .addGap(34, 34, 34)
                        .addComponent(labelThumbnail, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1))
                .addContainerGap(66, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updatePanel(){
        fieldStudyId.setText(""); // clean fields
        fieldStudyDate.setText("");
        fieldSeriesInstanceUID.setText("");
   
        String imageSelected = tableListImages.getValueAt(tableListImages.getSelectedRow(), 0).toString();
        labelInfo.setText("Loading... ");
        downloadImage(imageSelected);
        
        ExtractDicomData edd = new ExtractDicomData(); // get the main fields to display to user
        
        labelInfo.setText("Patient/Image: " + imageSelected);
        
        fieldStudyId.setText(edd.getStudyId());
        fieldStudyDate.setText(edd.getStudyDateFormatted());
        fieldSeriesInstanceUID.setText(edd.getSeriesInstanceUID());
        
        ImageIcon imageIcon = new ImageIcon("preview.jpg"); // load the image to a imageIcon
        Image image = imageIcon.getImage(); // transform it 
        Image newimg = image.getScaledInstance(250, 250,  java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
        imageIcon = new ImageIcon(newimg);
        labelThumbnail.setIcon(imageIcon);
    }
    
    private void tableListImagesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableListImagesMouseClicked
        
        updatePanel();
    }//GEN-LAST:event_tableListImagesMouseClicked

    private void downloadImage(String imageSelected){
        FileUtils.deleteQuietly(new File("temp.dcm"));
        FileUtils.deleteQuietly(new File("preview.jpg"));
        InputStream imageFromDatalake = datalake.getObject("patientimages", imageSelected);
        File outputFile = new File("temp.dcm");
        try {
            FileUtils.copyInputStreamToFile(imageFromDatalake, outputFile);
            Dcm2Jpg.convertDcm2Jpg("temp.dcm","preview.jpg");          
        }
        catch(Exception e){
            System.err.println("Cannot preview image. " + e.getMessage());
        }
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        boolean isRowSelected = !tableListImages.getSelectionModel().isSelectionEmpty();
        String imageSelected = tableListImages.getValueAt(tableListImages.getSelectedRow(), 0).toString();
        if(isRowSelected && datalake != null){ // only works if there is a row selected and there's an instance of the datalake       
            ImageView imageView = new ImageView();
            imageView.setTitle(imageSelected);
            imageIcon = new ImageIcon("preview.jpg");
            imageIcon.getImage().flush();
            imageView.setContentPane(new JLabel(imageIcon));
            imageView.setVisible(true);
            imageView.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        }
        else {
            JOptionPane.showMessageDialog(null, "No image selected", "Error at selecting image", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void labelThumbnailKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_labelThumbnailKeyPressed
        //updatePanel();
    }//GEN-LAST:event_labelThumbnailKeyPressed

    private void tableListImagesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableListImagesKeyPressed
        updatePanel();
    }//GEN-LAST:event_tableListImagesKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientDetails().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField fieldSeriesInstanceUID;
    private javax.swing.JTextField fieldStudyDate;
    private javax.swing.JTextField fieldStudyId;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelInfo;
    private javax.swing.JLabel labelPreview;
    private javax.swing.JLabel labelThumbnail;
    private javax.swing.JTable tableListImages;
    private javax.swing.JTextField textFieldPatientID;
    // End of variables declaration//GEN-END:variables

    public void fillTable(String patientId, List<String> imagesList){
        textFieldPatientID.setText(patientId);
        String col[] = {"Images of patient " + patientId};

        DefaultTableModel tableModel = new DefaultTableModel(col, 0);
        
        for(String imageName: imagesList){
            Object[] obj = {
                imageName
            };
            tableModel.addRow(obj);
        }
        
        tableListImages.setModel(tableModel);
        tableListImages.setAutoCreateRowSorter(true);
    }
}
